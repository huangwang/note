<?php

/**
 * @file
 * Enables multi-user notes.
 */

/**
 * Implements hook_node_info().
 */
function note_node_info() {
  return array(
    'note' => array(
      'name' => t('Note entry'),
      'base' => 'note',
      'description' => t('Use for multi-user notes. Every user gets a personal note.'),
    )
  );
}

/**
 * Implements hook_user_view().
 */
function note_user_view($account) {
  if (user_access('create note content', $account)) {
    $account->content['summary']['note'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Note'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent note entries'), "note/$account->uid", array('attributes' => array('title' => t("Read !username's latest note entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('note')),
    );
  }
}

/**
 * Implements hook_help().
 */
function note_help($path, $arg) {
  switch ($path) {
    case 'admin/help#note':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Note module allows registered users to maintain an online journal, or <em>note</em>. Notes are made up of individual <em>note entries</em>. By default, the note entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@note'>Note module</a>.", array('@note' => 'http://drupal.org/documentation/modules/note/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user notes') . '</dt>';
      $output .= '<dd>' . t("Each user's note entries are automatically displayed with a link to the user's main note page. You can create as many single-user notes as you have site users with permission to create note content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user notes') . '</dt>';
      $output .= '<dd>' . t("Note entries from each single-user note are also aggregated into one central multi-user note, which displays the note content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Notes</em> menu item added to the Navigation menu, which displays all notes available on your site, and a <em>My note</em> item displaying the current user's note entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Note module also creates a default <em>Recent note posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function note_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function note_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t("!name's note", array('!name' => format_username($node))), 'note/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function note_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'note' && (arg(0) != 'note' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['note_usernames_note'] = array(
        'title' => t("!username's note", array('!username' => format_username($node))),
        'href' => "note/$node->uid",
        'attributes' => array('title' => t("Read !username's latest note entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['note'] = array(
        '#theme' => 'links__node__note',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function note_menu() {
  $items['note/%user_uid_optional'] = array(
    'title' => 'My note',
    'page callback' => 'note_page_user',
    'page arguments' => array(1),
    'access callback' => 'note_page_user_access',
    'access arguments' => array(1),
    'file' => 'note.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function note_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Provide a helper action link to the author on the 'note/%' page.
  if ($root_path == 'note/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['note'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create note content')) {
      $data['actions']['output']['note']['#link']['title'] = t('Post new note entry.');
      $data['actions']['output']['note']['#link']['href'] = 'node/add/note';
    }
    else {
      $data['actions']['output']['note']['#link']['title'] = t('You are not allowed to post a new note entry.');
    }
  }
}

/**
 * Access callback for user note pages.
 */
function note_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a note to 'exist' the user must either be able to
  // create new note entries, or it must have existing posts.
  return $account->uid && user_access('access content') && user_access('create note content', $account) ;
}