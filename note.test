<?php

/**
 * @file
 * Tests for note.module.
 */

class NoteTestCase extends DrupalWebTestCase {
  protected $big_user;
  protected $own_user;
  protected $any_user;

  public static function getInfo() {
    return array(
      'name' => 'Note functionality',
      'description' => 'Create, view, edit, delete, and change note entries and verify its consistency in the database.',
      'group' => 'Note',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    parent::setUp('note');
    // Create users.
    //$this->big_user = $this->drupalCreateUser(array('administer blocks'));
    $this->own_user = $this->drupalCreateUser(array('create note content', 'edit own note content', 'delete own note content'));
    $this->any_user = $this->drupalCreateUser(array('create note content', 'edit any note content', 'delete any note content', 'access administration pages'));
  }

  /**
   * Confirm that the "You are not allowed to post a new note entry." message
   * shows up if a user submitted note entries, has been denied that
   * permission, and goes to the note page.
   */
  function testUnprivilegedUser() {
    // Create a note node for a user with no note permissions.
    $this->drupalCreateNode(array('type' => 'note', 'uid' => $this->big_user->uid));

    $this->drupalLogin($this->big_user);

    $this->drupalGet('note/' . $this->big_user->uid);
    $this->assertResponse(200);
    $this->assertTitle(t("@name's note", array('@name' => format_username($this->big_user))) . ' | Drupal', 'Note title was displayed');
    $this->assertText(t('You are not allowed to post a new note entry.'), 'No new entries can be posted without the right permission');
  }

  /**
   * View the note of a user with no note entries as another user.
   */
  function testNotePageNoEntries() {
    $this->drupalLogin($this->big_user);

    $this->drupalGet('note/' . $this->own_user->uid);
    $this->assertResponse(200);
    $this->assertTitle(t("@name's note", array('@name' => format_username($this->own_user))) . ' | Drupal', 'Blog title was displayed');
    $this->assertText(t('@author has not created any note entries.', array('@author' => format_username($this->own_user))), 'Users note displayed with no entries');
  }

  /**
   * Login users, create note nodes, and test note functionality through the admin and user interfaces.
   */
  function testNote() {
    // Login the admin user.
    $this->drupalLogin($this->big_user);
    // Enable the recent note block.
    $edit = array();
    //$edit['blocks[blog_recent][region]'] = 'sidebar_second';
    //$this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
    // Verify ability to change number of recent note posts in block.
    $edit = array();
    //$edit['blog_block_count'] = 5;
    //$this->drupalPost('admin/structure/block/manage/note/recent/configure', $edit, t('Save block'));
    //$this->assertEqual(variable_get('blog_block_count', 10), 5, 'Number of recent note posts changed.');

    // Do basic tests for each user.
    $this->doBasicTests($this->any_user, TRUE);
    $this->doBasicTests($this->own_user, FALSE);

    // Create another note node for the any note user.
    $node = $this->drupalCreateNode(array('type' => 'note', 'uid' => $this->any_user->uid));
    // Verify the own note user only has access to the note view node.
    $this->verifyBlogs($this->any_user, $node, FALSE, 403);

    // Create another note node for the own note user.
    $node = $this->drupalCreateNode(array('type' => 'note', 'uid' => $this->own_user->uid));
    // Login the any note user.
    $this->drupalLogin($this->any_user);
    // Verify the any note user has access to all the note nodes.
    $this->verifyBlogs($this->own_user, $node, TRUE);
  }

  /**
   * Run basic tests on the indicated user.
   *
   * @param object $user
   *   The logged in user.
   * @param boolean $admin
   *   User has 'access administration pages' privilege.
   */
  private function doBasicTests($user, $admin) {
    // Login the user.
    $this->drupalLogin($user);
    // Create note node.
    $node = $this->drupalCreateNode(array('type' => 'note'));
    // Verify the user has access to all the note nodes.
    $this->verifyBlogs($user, $node, $admin);
    // Create one more node to test the note page with more than one node
    $this->drupalCreateNode(array('type' => 'note', 'uid' => $user->uid));
    // Verify the note links are displayed.
    $this->verifyNoteLinks($user);
  }

  /**
   * Verify the logged in user has the desired access to the various note nodes.
   *
   * @param object $node_user
   *   The user who creates the node.
   * @param object $node
   *   A node object.
   * @param boolean $admin
   *   User has 'access administration pages' privilege.
   * @param integer $response
   *   HTTP response code.
   */
  private function verifyNotes($node_user, $node, $admin, $response = 200) {
    $response2 = ($admin) ? 200 : 403;

    // View note help node.
    $this->drupalGet('admin/help/note');
    $this->assertResponse($response2);
    if ($response2 == 200) {
      $this->assertTitle(t('Note | Drupal'), 'Note help node was displayed');
      $this->assertText(t('Note'), 'Note help node was displayed');
    }

    // Verify the note block was displayed.
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertText(t('Recent note posts'), 'Note block was displayed');

    // View note node.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title . ' | Drupal', 'Note node was displayed');
    $breadcrumb = array(
      l(t('Home'), NULL),
      l(t('Notes'), 'note'),
      l(t("!name's note", array('!name' => format_username($node_user))), 'note/' . $node_user->uid),
    );
    $this->assertRaw(theme('breadcrumb', array('breadcrumb' => $breadcrumb)), 'Breadcrumbs were displayed');

    // View note edit node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertTitle('Edit Note entry ' . $node->title . ' | Drupal', 'Note edit node was displayed');
    }

    if ($response == 200) {
      // Edit note node.
      $edit = array();
      $langcode = LANGUAGE_NONE;
      $edit["title"] = 'node/' . $node->nid;
      $edit["body[$langcode][0][value]"] = $this->randomName(256);
      $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
      $this->assertRaw(t('Note entry %title has been updated.', array('%title' => $edit["title"])), 'Note node was edited');

      // Delete note node.
      $this->drupalPost('node/' . $node->nid . '/delete', array(), t('Delete'));
      $this->assertResponse($response);
      $this->assertRaw(t('Note entry %title has been deleted.', array('%title' => $edit["title"])), 'Note node was deleted');
    }
  }

  /**
   * Verify the note links are displayed to the logged in user.
   *
   * @param object $user
   *   The logged in user.
   */
  private function verifyNoteLinks($user) {
    // Confirm note entries link exists on the user page.
    $this->drupalGet('user/' . $user->uid);
    $this->assertResponse(200);
    $this->assertText(t('View recent note entries'), 'View recent note entries link was displayed');

    // Confirm the recent note entries link goes to the user's note page.
    $this->clickLink('View recent note entries');
    $this->assertTitle(t("@name's note | Drupal", array('@name' => format_username($user))), 'View recent note entries link target was correct');

    // Confirm a note page was displayed.
    $this->drupalGet('note');
    $this->assertResponse(200);
    $this->assertTitle('Blogs | Drupal', 'Blog page was displayed');
    $this->assertText(t('Home'), 'Breadcrumbs were displayed');
    $this->assertLink(t('Create new note entry'));

    // Confirm a note page was displayed per user.
    $this->drupalGet('note/' . $user->uid);
    $this->assertTitle(t("@name's note | Drupal", array('@name' => format_username($user))), 'User note node was displayed');

    // Confirm a note feed was displayed.
    $this->drupalGet('note/feed');
    $this->assertTitle(t('Drupal blogs'), 'Blog feed was displayed');

    // Confirm a note feed was displayed per user.
    $this->drupalGet('note/' . $user->uid . '/feed');
    $this->assertTitle(t("@name's note", array('@name' => format_username($user))), 'User note feed was displayed');
  }
}
